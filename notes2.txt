Started from Routes

1. useEffect Hook is called after every component render. Also the dependency array inside it is
   not compulsory to be declared there. Also if we use useEffect before the console.log("Header")
   , the output will be Header Name and then the callback of the useEffect. 


    dependency array conditions
        i. When the array is not declared -> The callback function is called everytime the component
           gets rendered.

        ii. When the array is declared but its empty -> Callback is called only once , in the initial
            render only and not after that.

        iii. When there is say a local state variable in the array, then the callback is called
             everytime the variable is updated.

2. Never use useState inside a if else condition or for loops, it throws error

3. Configuration in routing means that information that will define what will happen in a specific
   route.

4. RouterProvider will give the routing config to the page.

5. When we are using <Outlet /> , then the component of the children route will be rendered, in after
   a way we are dynamically routing and this is done to keep the header fixed and not change.

6. Outlet component gets replaced whenever we go that speific route.

7. We dont use anchor tag in react to navigate to pages, this is because when we use the anchor tag
   it reloads the entire page and that is something we dont want to as it reduces the speed.

8. We use <Link> </Link> to redirect to the another page instead because it does not reload the onChange
   
9. So when we are using the Link, then we are not reloading the page , we are just refreshing the
   component of the app.js and the components just get replaced when go to that specific route.

10. That is why React is called Single Page Application coz we actually using a single page and
    just defining routes and it just gets refreshed in the same page.

11. There are 2 tpyes of routing 
    i. Server Side Routing -> When we making a network call and then we get a HTML page
       basically when we are using anchor tag is an example.

    ii. Client Side Routing -> When we are just routing to different components inside the 
        client side application.

12. In react class based component , the constructor is the best place to create state variables.

13. Never update state variables directly.

14. Only the state variables in the this.setState are actually changed and the others are
   are not changed.

15. In child based components , the order of call is
    constructor => render() => componentDidMount()

16. For a component to be mounted in ReactJS it means to be initialized and inserted in the DOM.
    Mounting is the initial phase in which the instance of the component is created and inserted
    into the DOM. When the component gets successfully inserted into the DOM, the component is said
    to be mounted

17. Mounting occurs when a component is first added to the page, while rendering occurs when a 
    component's state changes. Mounting initializes the component and sets it up for interaction,
    while rendering updates the component's view based on changes to its state.

18. componentDidMount is used for making an API call.

19. Refer wojtekmaj react react lifecycle , below link

20. https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

21. Why we see componentDidMount being called afterwards even in the case of child component
    because , react first completes the render phase of all the components and then it will
    run the componentDidMount of all the components , this is done by React for optimization.

22. Also the render phases of child components are batched or clubbed basically.

23. This is done because commit phase(whe didMount is implemented) is very costly computationally
    coz we are manipulating the DOM and that DOM manipulation is costly so it does it together
    at the end (reonciliation algo)

24. Read the console log in the About Us page and also see the lifecycle diagram for explaination.

25. componentWillUnmount() is called when the page is unmounted.

26. Unmounted means when the component goes away from the browser(when we switch to another page)

27. As soon as we say change to another page , componentWillUnmount() is called.

28. Point to remember that never compare the react lifecycle to react functional component.

29. In a crux ,  its the single page , we are just chaging the component in React.

30. path: "/restaurant/:resId" -> In this :resId is dynamic means it can be changed dynamically.

31. useParams helps to access the parameters of the current route to manage the dynamic routes
    in the URL

32. Key should always be on the parent jsx whenever we are using jsx tag over jsx tag

33. <Limk> </Link> is basically a wrapper over anchor tag <a href= > </a> which is provided to us by
    the react-router-dom library and when we see the transpiled Link tag in console , it shows us
    the anchor tag.

34. Single Responsibility Principle means that when we are breaking down the code into smaller
    components where each component has in a way has only 1 task to do(Modular approach).

35. 